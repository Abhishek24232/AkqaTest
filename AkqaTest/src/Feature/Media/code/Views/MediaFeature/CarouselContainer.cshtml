@using AkqaTest.Foundation.SitecoreExtensions.Extensions
@using Glass.Mapper.Sc.Web.Mvc

@model AkqaTest.Feature.Media.Models.ICarsouselContainer


@if (Model != null && Model.Datasource.Children.Any())
{
    <div class="row">
        <div class="column">
            <h2>@Html.Glass().Editable(x => x.Title)</h2>

            <p>@Html.Glass().Editable(x => x.Description) </p>

            @if (Sitecore.Context.PageMode.IsExperienceEditor)
            {

                foreach (var carousel in Model.Datasource.Children.Take(Model.InitialItemsDesktop))
                {
                    <div class="col-sm-6 col-xs-12">
                        <h3>@Html.Glass().Editable(carousel, x => x.Title)</h3>

                        @Html.Glass().RenderImage(carousel, x => x.ImageDesktop, new { @class = "d-block" }, isEditable: true)

                        @Html.Glass().RenderLink(carousel, x => x.CtaLink, new { @text = carousel.CtaText, @class = "btn btn-primary btn-sm" }, isEditable: true)
                    </div>
                }

            }
            else
            {
                <div id="heroCarousel" class="carousel slide" style="width: 50%;" data-ride="carousel">
                    @if (Model.Datasource.Children != null)
                    {
                        <ol class="carousel-indicators">
                            @{
                                var i = 0;
                                foreach (var carousel in Model.Datasource.Children.Take(Model.InitialItemsDesktop))
                                {
                                    <li data-target="#heroCarousel" data-slide-to="@i" @Html.Raw(i == 0 ? "class=\"active\"" : "")></li>
                                    i++;
                                }
                            }
                        </ol>
                        <div class="carousel-inner" role="listbox">
                            @{
                                var j = 1;
                                foreach (var carousel in Model.Datasource.Children.Take(Model.InitialItemsDesktop))
                                {
                                    <div class="carousel-item@(j == 1 ? " active" : "")">
                                        <h3 style="position:absolute;">@Html.Glass().Editable(carousel, x => x.Title)</h3>
                                        @if (carousel.ImageDesktop != null)
                                        {
                                            <img class="d-block img-fluid" src="@carousel.ImageDesktop.Src" />
                                        }
                                        @if (carousel.CtaLink != null)
                                        {
                                            <button type="button" href="@carousel.CtaLink.Url" style="margin-top:-69px;margin-left: 287px;position: absolute;" class="d-block btn btn-primary btn-sm">@carousel.CtaText</button>
                                        }
                                    </div>

                                    j++;
                                }
                            }
                        </div>

                        <a class="carousel-control-prev" href="#heroCarousel" role="button" data-slide="prev">
                            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                            <span class="sr-only">@Html.Sitecore().Dictionary("/carousel/previous")</span>
                        </a>
                        <a class="carousel-control-next" href="#heroCarousel" role="button" data-slide="next">
                            <span class="carousel-control-next-icon" aria-hidden="true"></span>
                            <span class="sr-only">@Html.Sitecore().Dictionary("/carousel/next")</span>
                        </a>

                    }
                </div>
            }
        </div>
    </div>

    //Carousel Using Dynamic PLaceholder

    <div class="row">
        <div class="column">
            <h2>@Html.Glass().Editable(x => x.SubTitle)</h2>

            <p>@Html.Glass().Editable(x => x.Description) </p>



            <div id="heroCarousel2" class="carousel slide" style="width: 50%;" data-ride="carousel">

                <ol class="carousel-indicators">
                    @{
                        for (int i = 0; i < Model.InitialItemsDesktop; i++)
                        {
                            <li data-target="#heroCarousel2" data-slide-to="@i" @Html.Raw(i == 0 ? "class=\"active\"" : "")></li>

                        }
                    }

                </ol>

                <div class="carousel-inner" role="listbox">
                    @{
                        var carouselClass = string.Empty;

                        for (int i = 0; i < Model.InitialItemsDesktop; i++)
                        {
                            <div @Html.Raw(!Sitecore.Context.PageMode.IsExperienceEditor && i<=0? "class=\"carousel-item active\"" :!Sitecore.Context.PageMode.IsExperienceEditor && i>0? "class=\"carousel-item\"": "")>
                                @Html.Sitecore().DynamicPlaceholder("CarouselContainerPlaceholder", count: 1,seed: i)
                            </div>

                        }

                    }


                </div>
                @if (!Sitecore.Context.PageMode.IsExperienceEditor)
                {
                    <a class="carousel-control-prev" href="#heroCarousel2" role="button" data-slide="prev">
                        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                        <span class="sr-only">@Html.Sitecore().Dictionary("/carousel/previous")</span>
                    </a>
                    <a class="carousel-control-next" href="#heroCarousel2" role="button" data-slide="next">
                        <span class="carousel-control-next-icon" aria-hidden="true"></span>
                        <span class="sr-only">@Html.Sitecore().Dictionary("/carousel/next")</span>
                    </a>
                }

            </div>
        </div>
    </div>
}

<style>

    /* Create two equal columns that sits next to each other */
    .column {
        float: left;
        width: 100%;
    }
</style>



